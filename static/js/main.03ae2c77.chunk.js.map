{"version":3,"sources":["components/Watch.js","hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","padding","Watch","listOfLaps","classes","useState","time","setTime","isRunning","setIsRunning","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","laps","setLap","counterRef","useRef","handleStart","current","setInterval","parseTime","centiSec_num","parseInt","hours","Math","floor","minutes","seconds","centiseconds","Grid","container","direction","alignItems","justifyContent","className","lg","sm","xs","display","Typography","variant","component","gutterBottom","ButtonGroup","color","aria-label","size","Button","onClick","clearInterval","clear","alert","spacing","map","lap","Paper","App","Container","style","height","marginTop","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03ae2c77.chunk.js","sourcesContent":["//import react and hook functions; allows use of state without defining a class\r\nimport React, { useState, useRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import localStorage hook from ./hooks\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n//import components from material-ui library\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  paper: {\r\n    padding: 12,\r\n  },\r\n}));\r\n\r\nconst Watch = () => {\r\n  const classes = useStyles();\r\n  //State variable contianing: Time and\r\n  const [time, setTime] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  const [laps, setLap] = useLocalStorage(\"laps\", []);\r\n\r\n  const counterRef = useRef(0);\r\n  const handleStart = () => {\r\n    setIsRunning(true);\r\n    counterRef.current = setInterval(() => {\r\n      console.log(\"cts\");\r\n      setTime((time) => time + 1.6);\r\n    }, 10);\r\n  };\r\n\r\n  const handleStop = () => {\r\n    clearInterval(counterRef.current);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    clearInterval(counterRef.current);\r\n    setIsRunning(false);\r\n    setTime(0);\r\n  };\r\n\r\n  const handleLap = () => {\r\n    setLap((laps) => [...laps, parseTime(time)]);\r\n  };\r\n\r\n  const handleClearLaps = () => {\r\n    localStorage.clear();\r\n    setLap([]);\r\n    alert(\"CLEAR!\");\r\n  };\r\n\r\n  const parseTime = (time) => {\r\n    var centiSec_num = parseInt(time, 10); // don't forget the second param\r\n    var hours = Math.floor(centiSec_num / 360000);\r\n    var minutes = Math.floor((centiSec_num - hours * 360000) / 6000);\r\n    var seconds = Math.floor((centiSec_num - minutes * 6000) / 100);\r\n    var centiseconds = centiSec_num - seconds * 100;\r\n\r\n    if (hours < 10) {\r\n      hours = \"0\" + hours;\r\n    }\r\n    if (minutes < 10) {\r\n      minutes = \"0\" + minutes;\r\n    }\r\n    if (seconds < 10) {\r\n      seconds = \"0\" + seconds;\r\n    }\r\n\r\n    if (centiseconds < 10) {\r\n      centiseconds = \"0\" + centiseconds;\r\n    }\r\n    if (centiseconds < 100) {\r\n      centiseconds = \"0\" + centiseconds;\r\n    }\r\n    return hours + \":\" + minutes + \":\" + seconds + \":\" + centiseconds;\r\n  };\r\n\r\n  const renderList = (listOfLaps) => {\r\n    const listItems = (\r\n      <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n        {listOfLaps.map((lap) => (\r\n          <Grid key={lap} item>\r\n            <Paper className={classes.paper}> {lap} </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n\r\n    return listItems;\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      className={classes.root}\r\n    >\r\n      <Grid item lg={12} sm={6} xs={3}>\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <Grid item lg={12} sm={6} xs={3} display=\"block\">\r\n            {\" \"}\r\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\r\n              {/* brackets around the variable names tells the app that these are variables; \r\n            without them, the app would render the text to the screen instead */}\r\n              {parseTime(time)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item lg={12} sm={6} xs={3}>\r\n            <ButtonGroup\r\n              color=\"primary\"\r\n              aria-label=\"outlined secondary button group\"\r\n              size=\"large\"\r\n            >\r\n              {!isRunning && time === 0 && (\r\n                <Button onClick={handleStart}> Start </Button>\r\n              )}\r\n              {isRunning && <Button onClick={handleStop}> Stop </Button>}\r\n              {!isRunning && time !== 0 && (\r\n                <Button onClick={handleStart}> Resume </Button>\r\n              )}\r\n              <Button onClick={handleReset}>Reset</Button>\r\n              <Button onClick={handleLap}>Lap</Button>\r\n              <Button onClick={handleClearLaps}>Clear Laps</Button>\r\n            </ButtonGroup>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item lg={12} sm={6} xs={3}>\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <Grid item xs={12}>\r\n            {\" \"}\r\n            <Typography variant=\"h1\" component=\"h2\" gutterBottom>\r\n              Laps\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item lg={12} sm={6} xs={3}>\r\n            {\" \"}\r\n            {renderList(laps)}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Watch;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\n\n//import react module; destructure component function from react module\nimport React from \"react\";\n\n//import Watch component\nimport Watch from \"./components/Watch\";\n\n//import material-ui components\nimport { Container } from \"@material-ui/core\";\nconst App = () =>{\n  return (\n    <Container style={{height : \"100vh\" , marginTop: \"200px\" , padding: \"10px\"}}>\n      <Watch />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}